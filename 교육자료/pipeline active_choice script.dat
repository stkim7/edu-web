--- Release_Branch - active choice parameter (privateToken 수정해야 함)

import groovy.json.JsonSlurper

gitLabBaseUrl = "http://192.168.32.99:8081/api/v4/projects";
privateToken = "glpat-jvy2-Vet2p1_AvTVhc6X";
projName = "edu-web";

def pad(strNum, idx) {
    str = ""
    for(int i=0; i<(idx-strNum.trim().length()); i++) {
        str += 0
    }

    return str + strNum
}

def verSort(versions, maxSize) {
    dataMap = [:]
    dataKey = []

    versions.each {
        token1 = "$it".split("-")

        if(token1.size() == 2) {
            token2 = token1[1].split("\\.")

            if(token2.size() == 3) {
                idx = pad(token2[0], 5) +
                      pad(token2[1], 5) +
                      pad(token2[2], 5)
                dataKey.add(idx)
                dataMap[idx] = "$it"
            }
        }
    }

    dataKey = dataKey.sort().reverse()

    rtnVers = []

    if(maxSize > dataKey.size()) {
        maxSize = dataKey.size()
    }

    for(int i=0; i<maxSize; i++) {
        rtnVers.add(dataMap[dataKey[i]])
    }

    return rtnVers
}

def getProjectId(baseUrl) {
    projId = ""

    http = new URL(baseUrl + "?page=1&per_page=100").openConnection()
    http.setRequestMethod("GET")
    http.setRequestProperty("PRIVATE-TOKEN", privateToken)

    response = new JsonSlurper().parseText(http.inputStream.getText("UTF-8"))

    for(proj in response) {
        if(proj.name.contains(projName)) {
            projId = proj.id
        }
    }

    return projId;
}

def getBranchList(baseUrl, projId) {

     if(projId == "") {
       return ["Project [" + projName + "] not found in gitlab"]
    }

    if(!baseUrl.endsWith('/')) {
        baseUrl += '/'
    }

    def branchList = []

    for(int pageNo=1; pageNo<10; pageNo++) {
        branchSearchUrl = baseUrl + projId + "/repository/branches?search=release&page=" + pageNo + "&per_page=100";

        http = new URL( branchSearchUrl ).openConnection()
        http.setRequestMethod("GET")
        http.setRequestProperty("PRIVATE-TOKEN", privateToken)

        response = new JsonSlurper().parseText(http.inputStream.getText("UTF-8"))

        for(branch in response) {
            branchList.add(branch.name)
        }

        if(response == [] ) {
            break;
        }
    }

    return verSort(branchList, 30)
}

try {
	def gitlabProjectId = getProjectId(gitLabBaseUrl)

	return branchList = getBranchList(gitLabBaseUrl, gitlabProjectId)
} catch (Exception ex) {
	return [ex.getMessage()]
}





-- Check_Version - Active Choices Reactive Reference Parameter

import groovy.json.JsonSlurper

repoName = "maven-releases"
groupId = "net.wise.edu"
artifactId = "edu-web"
extension = "war"

// nexus artifact 배포 버전 확인 url
baseUrl = String.format("http://192.168.32.99:8085"
  + "/service/rest/v1/search/assets?repository=$repoName"
  + "&format=maven2&maven.groupId=$groupId"
  + "&maven.artifactId=$artifactId&maven.extension=$extension",
  repoName, groupId, artifactId)
  
versionList = []

// 버전 리스트 가져오기
def getVersions(baseUrl) {
  
  http = new URL(baseUrl).openConnection()
  http.setRequestMethod("GET")

  response = new JsonSlurper().parseText(http.inputStream.getText("UTF-8"))

  for (item in response.items) {
    if(item.maven2.classifier != "sources") {
      versionList.add(item.maven2.version)
    }
  }
  
  // pagenation 적용
  if(response.continuationToken != null) {
      getVersions(baseUrl + "&continuationToken=" + response.continuationToken)
  }

  return versionList
}

try {
   buildVersion = Release_Branch.replace("release-", "").trim()

   versions = getVersions(baseUrl)

   if(versions.contains(buildVersion)) {

       return """
          <b>
              nexus에 존재: ${groupId}:${artifactId}:${buildVersion} <br />
              해당 버전은 이미 빌드되어 nexus에 release되어 있습니다. <br/>
              nexus에서 해당 버전을 삭제하거나 새로운 release 브랜치를 생성하여 주세요. <br/>
              계속 빌드를 진행하면 빌드 후 nexus 배포 시 충돌이 나서 오류가 발생합니다.
          </b>
       """
    } else {
        return """
        <b>${groupId}:${artifactId}:${buildVersion} 으로 빌드되어 nexus에 upload됩니다. </b>
        """
    }
} catch(Exception ex) {
   return """
   <b>오류: ${ex.getMessage()}</b>
   """
}


--- fallback 오류
return ["Error: Check gitlab, nexus is alive"]

return """
   <b>"Error: Check gitlab, nexus is alive"</b>
"""

--- choice type
single
formatted HTML

-- Referenced parameters
Release_Branch


--- 파이프라인 소스

pipeline {
    agent any
    
     environment {
        NEXUS_CRED = credentials('NEXUS_CREDENTIAL')
        GITLAB_CRED = credentials('GITLAB_CREDENTIAL')
        MAVEN_HOME = "/app/apache-maven-3.8.6"
        JAVA_HOME = "/usr/lib/jvm/java-11-openjdk-11.0.17.0.8-2.el7_9.x86_64"
        PATH="${env.JAVA_HOME}/bin:${env.MAVEN_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Clone') {
            steps {
                script {
                    env.Build_Version=env.Release_Branch.replace("release-", "").trim()
                    cleanWs()
                }
                
                git branch: env.Release_Branch, credentialsId: 'GITLAB_CREDENTIAL', 
	               url: 'http://192.168.32.99:8081/edu/edu-web.git'
            }
        }
        
        stage('Maven Build & Unit Test') {
            steps {
                sh '''
                    echo $PATH
                    mvn clean package
                '''
            }
        }
        
        stage('Deploy to Nexus') {
            steps {
                sh '''
                    mvn deploy:deploy-file \
                        -Durl=http://192.168.32.99:8085/repository/maven-releases/ \
                        -DrepositoryId=edu-nexus \
                        -DgroupId=net.wise.edu \
                        -DartifactId=edu-web \
                        -Dversion=$Build_Version \
                        -Dpackaging=war \
                        -DgeneratePom=true=false \
                         -Dfile=./target/edu-web.war
                '''
            }
        }
        
        stage('Merge to master and tagging') {
            steps {
                sh '''
                    git config push.default simple
                    git checkout -b master
                    git merge -X theirs $Release_Branch
                    git tag $Build_Version -f
                    git push --tags --set-upstream http://$GITLAB_CRED_USR:$GITLAB_CRED_PSW@192.168.32.99:8081/edu/edu-web.git master -f
                '''
            }
        }
    }
}






배포 

-- Release_Version -- 

import groovy.json.JsonSlurper

repoName = "maven-releases"
groupId = "net.wise.edu"
artifactId = "edu-web"
extension = "war"

// nexus artifact 배포 버전 확인 url
baseUrl = String.format("http://192.168.32.99:8085"
  + "/service/rest/v1/search/assets?repository=$repoName"
  + "&format=maven2&maven.groupId=$groupId"
  + "&maven.artifactId=$artifactId&maven.extension=$extension",
  repoName, groupId, artifactId)

versionList = []

def getVersions(baseUrl) {
  http = new URL(baseUrl).openConnection()
  http.setRequestMethod("GET")

  response = new JsonSlurper().parseText(http.inputStream.getText("UTF-8"))

  for (item in response.items) {
      versionList.add(item.maven2.version)
  }

  // pagenation 적용
  if(response.continuationToken != null) {
      getVersions(baseUrl + "&continuationToken=" + response.continuationToken)
  }

  return versionList
}

def pad(strNum, idx) {
    str = ""
    for(int i=0; i<(idx-strNum.trim().length()); i++) {
        str += 0
    }

    return str + strNum
}

def sortVer(versions, maxCount) {
    dataMap = [:]
    dataKey = []
    count = 1

    versions.each {
        token = "$it".split("\\.")

        if(token.size() == 3) {
            idx = pad(token[0], 5) +
                  pad(token[1], 5) +
                  pad(token[2], 5)
                  dataKey.add(idx)
                  dataMap[idx] = "$it"
            }
    }

    dataKey = dataKey.sort().reverse()

    rtnVers = []

    for(int i=0; i<dataMap.size(); i++) {
        rtnVers.add( dataMap[dataKey[i]] )
        if(count == maxCount) break
    }

    return rtnVers
}

try {
   versions = getVersions(baseUrl)
   return sortVer(versions, 30)
} catch (Exception ex) {
   return ["Error: " + ex.getMessage()]
}

