1. 그룹 및 계정 생성
	groupadd cmadmin
	useradd -d /home/cmadmin -s /bin/bash -g cmadmin cmadmin
	passwd cmadmin
	
2. sudoers 등록
	chmod +w /etc/sudoers
	vi /etc/sudoers
		cmadmin ALL=(ALL)       ALL
		
3. selinux 확인
	getenforce
	--> disabled가 아니면  vi /etc/selinux/config 해서 disabled로 변경

4. Limits 설정
	- vi /etc/security/limits.conf
		cmadmin soft nproc 131072		
		cmadmin hard nproc 131072		
		cmadmin soft nofile 307200		
		cmadmin hard nofile 307200		
		cmadmin soft memlock unlimited		
		cmadmin hard memlock unlimited
		
5. sysctl 설정
	- vi /etc/sysctl.conf
		vm.swappiness = 0
		net.ipv4.ip_forward=1
		net.ipv4.conf.all.accept_redirects=0
		net.ipv6.conf.all.accept_redirects=0
		net.ipv4.conf.all.secure_redirects=0
		net.ipv4.conf.all.send_redirects=0
		kernel.nmi_watchdog=1
		kernel.shmall=4294967296
		kernel.shmmax=68719476736
		kernel.shmmni=4096
		kernel.sem=1000 32000 100 512
		kernel.msgmax=65536
		kernel.msgmnb=65536
		kernel.msgmni=2878
		kernel.sysrq=0
		kernel.core_uses_pid=1
		vm.vfs_cache_pressure=10000
		vm.max_map_count=262144
		net.core.rmem_default=33554432
		net.core.rmem_max=33554432
		net.core.wmem_default=33554432
		net.core.wmem_max=33554432
		net.core.optmem_max=33554432
		net.core.somaxconn=65535
		net.core.netdev_max_backlog=3000
		net.ipv4.tcp_mem=10000000 10000000 10000000
		net.ipv4.tcp_rmem=10000000 10000000 10000000
		net.ipv4.tcp_wmem=10000000 10000000 10000000
		net.ipv4.tcp_keepalive_time=20
		net.ipv4.tcp_keepalive_intvl=15
		net.ipv4.tcp_keepalive_probes=5
		net.ipv4.tcp_fin_timeout=30
		net.ipv4.ip_local_port_range=10000 65500
		net.ipv4.tcp_retries1=3
		net.ipv4.tcp_retries2=3
		net.ipv4.tcp_rfc1337=0
		net.ipv4.tcp_max_syn_backlog=8192
		net.ipv4.tcp_moderate_rcvbuf=1
		net.ipv4.tcp_congestion_control=cubic
		net.ipv4.tcp_sack=1
		net.ipv4.tcp_syn_retries=2
		net.ipv4.tcp_syncookies=1
		net.ipv4.tcp_timestamps=1
		net.ipv4.tcp_window_scaling=1
		net.ipv4.tcp_orphan_retries=0
		net.ipv4.conf.default.rp_filter=1
		net.ipv4.conf.default.accept_source_route=0
		fs.file-max=8000000
		fs.aio-max-nr=65536
		vm.overcommit_memory=1
		
	- sysctl -p 명령어로 제대로 적용된지 확인
	
6.	java 설치
	- yum list | grep openjdk | grep devel | grep 11
      yum list | grep openjdk | grep devel | grep 1.8
	  
	  yum install java-11-openjdk-devel
	  yum install java-1.8.0-openjdk-devel
	  
	  update-alternatives --config java (default java 세팅)
	  
	  wget https://download.java.net/openjdk/jdk17/ri/openjdk-17+35_linux-x64_bin.tar.gz
	  tar xvfz 35_linux-x64_bin.tar.gz
	  sudo mv jdk-17/ /usr/lib/jvm
	  
	  sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk-17/bin/java 3
	  
7. gitlab 설치
	- repository 설정
	  curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash
	- yum repolist로 추가된지 확인
	
	- yum install gitlab-ce

	- mkdir -p /data/git-data

	- vi /etc/gitlab/gitlab.rb
		external_url 'http://192.168.33.77:8081'

        git_data_dirs({
		   "default" => {
			 "path" => "/data/git-data"
		   }
		})
		
		puma['port'] = 8097

		nginx['enable'] = true
		nginx['client_max_body_size'] = '250m'
		
		gitlab_rails['gitlab_default_projects_features_builds'] = false
		
		node_exporter['enable'] = false
		redis_exporter['enable'] = false
		postgres_exporter['enable'] = false
		gitlab_exporter['enable'] = false
		gitlab_exporter['probe_sidekiq'] = false
		prometheus['enable'] = false
		prometheus['monitor_kubernetes'] = false
		prometheus_monitoring['enable'] = false
		
	- gitlab-ctl reconfigure (config 재설정)
	- gitlab-ctl start (gitlab start)
	- 초기 패스워드 확인
		cat /etc/gitlab/initial_root_password  | grep Password
	- 기본설정
		sign-up
		default branch

	- group > 계정 > 프로젝트 생성
	- 프로젝트 업로드
	
8. nexus 설치
	- wget https://download.sonatype.com/nexus/3/latest-unix.tar.gz
	- tar xvfz latest-unix.tar.gz
	- sudo mkdir -p /app
	- sudo mv nexus-3.58.1-02 /app
	- config 설정
	     vi /app/nexus-3.58.0-01/etc/nexus-default.properties
			application-port=8085
			nexus-edition=nexus-oss-edition			
				nexus-features=\			
				nexus-oss-feature
		vi /app/nexus-3.58.0-01/bin/nexus.vmoptions
          -Xms2703m
		  -Xmx2703m
          -sonatype-work 경로 지정
		  
	서비스 생성
    sudo vi /usr/lib/systemd/system/nexus.service

	[Unit]
	Description=nexus service
	After=network.target

	[Service]
	Environment="JAVA_HOME=/usr/lib/jvm/jdk-17"
	Type=forking
	LimitNOFILE=65536
	ExecStart=/app/nexus-3.58.1-02/bin/nexus start
	ExecStop=/app/nexus-3.58.1-02/bin/nexus stop
	Group=cmadmin
	User=cmadmin
	Restart=on-abort
	TimeoutSec=600

	[Install]
	WantedBy=multi-user.target


	서비스 기동
    sudo systemctl enable nexus.service		
    sudo systemctl start nexus
	
	
export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.19.0.7-1.el7_9.x86_64


9. jenkins 설치
	
    wget --no-check-certificate -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
    
	sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
 
	yum install jenkins
	
	서비스 파일 수정 (sudo vi /usr/lib/systemd/system/jenkins.service)
    Environment="JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.19.0.7-1.el7_9.x86_64"           
    Environment="JENKINS_PORT=8088"       
    Environment="JAVA_OPTS=-Djava.awt.headless=true -Xms512m -Xmx2048m"
	 
	서비스 기동 및 중지
    sudo systemctl daemon-reload     
    sudo systemctl enable jenkins     
    sudo systemctl start Jenkins
	
10. jenkins 파이프라인


-- Check_Version

import jenkins.*
import jenkins.model.* 
import hudson.*
import hudson.model.*
import com.cloudbees.plugins.credentials.*
import groovy.json.JsonSlurper

gitlabUrl = "http://gitlab.ftbs.com:10001/"
projectId = 11

try {
    accessToken = getGitlabAccToken()

    if(accessToken == null || accessToken.trim().length() == 0) {
        throw new Exception("Gitlab access token이 없습니다. \
            (Jenkins credential: GITLAB_ACC_TOKEN)")
    }

    lastBuiltVersion = getLastBuiltVersion(accessToken )

    return """
        마지막 빌드 버전 (Gitlab tag 기준) : <b>${lastBuiltVersion}</b><br/>
        <input type="hidden" name="value" value="${lastBuiltVersion}" />
    """
} catch (Exception ex) {
    errorMsg = ex.toString()

    return """
        <b> 오류: ${errorMsg} </b>
    """
}

def getGitlabAccToken() {
    jenkinsCredentials = CredentialsProvider.lookupCredentials(
        Credentials.class, Jenkins.instance, null, null
    )

    for (cred in jenkinsCredentials) {
        if(cred.id == "GITLAB_ACC_TOKEN") {
            return cred.password.toString()
        }
    }

    return null
}

def getLastBuiltVersion(accessToken) {
    if(gitlabUrl.endsWith('/')) {
        gitlabUrl += String.format("api/v4/projects/%s/repository/tags?search=v", projectId)
    } else {
        gitlabUrl += String.format("/api/v4/projects/%s/repository/tags?search=v", projectId)
    }
    
    http = new URL(gitlabUrl).openConnection()
    http.setRequestMethod("GET")
    http.setRequestProperty("PRIVATE-TOKEN", accessToken)
    
    resCode = http.getResponseCode()

    if (resCode < 200 || resCode >=300) {
        throw new Exception(http.getErrorStream().text)
    }
  
    response = new JsonSlurper().parseText(http.inputStream.getText("UTF-8"))

    if(response.size() > 0) {
        return response[0].name.replace('ftbs-api-', '')
    } else {
        return "v0.0.0"
    }
}
	
	
	
-- Build_Version
token = Check_Version.split(",")

buildVersion = []
msg = ""

if(token.size() == 2) {
   buildVersion.add(token[1])
   msg = "동일 버전으로 빌드됩니다"
} else if(token.size() == 1) {
    buildVersion = getNextVersion(token[0])
    msg = "빌드 버전을 선택하세요"
}

optionStr = ""
for(ver in buildVersion) {
    optionStr += """<option value='${ver}'>${ver}</option>"""
}

return """
    <b>${msg} : &nbsp;</b> 
    <select name="value">
         ${optionStr}
     </select> <br/><br/><br/>
     *** 버전 정책 (vX.Y.Z) : ex) v1.0.0<br/>
     X: major (대규모 업데이트), Y: minor (정기배포), Z: patch (수시배포 및 패치)
"""

def getNextVersion(lastVersion) {
    nextVersion = []
    version = lastVersion.toLowerCase().replace("v", "").split("\\.")

    nextVersion.add( String.format("v%s.%s.%s", version[0], version[1], Integer.parseInt(version[2]) + 1) )
    nextVersion.add( String.format("v%s.%s.%s", version[0], Integer.parseInt(version[1]) + 1, 0) )
    nextVersion.add( String.format("v%s.%s.%s", Integer.parseInt(version[0]) + 1, 0, 0) )

    return nextVersion 
}



pipeline {
    agent any
    
    environment {
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-17.0.7.0.7-3.el8.x86_64'
        PATH="${env.JAVA_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Clone') {
            steps {
                script {
                    env.sameVersion=env.Check_Version.split(",")[0].trim()
                    env.NexusVersion=env.Build_Version.toLowerCase().replace("v", "")

                    cleanWs()
                }
                
                git branch: 'release', credentialsId: 'GITLAB_CREDENTIAL', 
	               url: 'https://gitlab.wise.net:8081/wise/backend/devpro-ms-template.git'
            }
        }
        
        stage('Build source') {
            steps {
                sh '''
                set +x
                gradle build
                '''
            }
        }
        
        stage('Publish to Nexus') {
            steps {
                sh '''
                    set +x
                    cp ./build/libs/devpro-ms-template-1.0.0.jar ./devpro-ms-template.jar
                    tar cvf devpro-ms-template.tar devpro-ms-template.jar devpro*.db
                '''
                
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: 'nexus.wise.net:8085',
                    groupId: 'net.wise',
                    version: env.NexusVersion,
                    repository: 'maven-releases',
                    credentialsId: 'NEXUS_CREDENTIAL',
                    artifacts: [
                        [artifactId: 'devpro-ms-template',
                         classifier: '',
                         file: 'devpro-ms-template.tar',
                         type: 'tar']
                    ]
                )
            }
        }
        
        stage('Merge source and tagging') {
            steps {
                sh '''
                    set +x
                    git checkout -b master
                    git pull origin master
                    git merge release
                    git push origin master
                    
                    if [ $sameVersion == true ];
                    then
                        git tag -d "$Build_Version"
                        git push --delete origin "$Build_Version"
                        
                    fi
                       
                    git tag -a "$Build_Version" -m "tagged by jenkins"
                    git push origin "$Build_Version"
                '''
            }
        }
        
    }
}
